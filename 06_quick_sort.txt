#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
using namespace std;

// Function to swap two elements
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

// Deterministic Partition (using the last element as pivot)
int deterministicPartition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; ++j) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Randomized Partition (choosing a random element as pivot)
int randomizedPartition(vector<int>& arr, int low, int high) {
    int randomIndex = low + rand() % (high - low + 1);
    swap(arr[randomIndex], arr[high]);
    return deterministicPartition(arr, low, high);
}

// Deterministic QuickSort
void deterministicQuickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = deterministicPartition(arr, low, high);
        deterministicQuickSort(arr, low, pi - 1);
        deterministicQuickSort(arr, pi + 1, high);
    }
}

// Randomized QuickSort
void randomizedQuickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = randomizedPartition(arr, low, high);
        randomizedQuickSort(arr, low, pi - 1);
        randomizedQuickSort(arr, pi + 1, high);
    }
}

// Function to print an array
void printArray(const vector<int>& arr) {
    for (int i : arr) {
        cout << i << " ";
    }
    cout << endl;
}

// Main function for analysis
int main() {
    srand(time(0));
    int n;

    // Taking array size and elements from the user
    cout << "Enter the size of the array: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Copy array for deterministic and randomized tests
    vector<int> arrDeterministic = arr;
    vector<int> arrRandomized = arr;

    // Deterministic QuickSort
    cout << "\nArray before Deterministic QuickSort: ";
    printArray(arrDeterministic);
    deterministicQuickSort(arrDeterministic, 0, n - 1);
    cout << "Array after Deterministic QuickSort: ";
    printArray(arrDeterministic);

    // Randomized QuickSort
    cout << "\nArray before Randomized QuickSort: ";
    printArray(arrRandomized);
    randomizedQuickSort(arrRandomized, 0, n - 1);
    cout << "Array after Randomized QuickSort: ";
    printArray(arrRandomized);

    return 0;
}
